#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>
#include <semaphore.h>
#include <unistd.h>

#define NUM_READERS 5
#define NUM_WRITERS 2

sem_t wrt;           // Semaphore for writers
pthread_mutex_t mutex; // Mutex for read_count
int read_count = 0;    // Number of active readers
int shared_data = 0;   // Shared resource

void* reader(void* arg) {
    int id = *(int*)arg;
    while (1) {
        // Entry section
        pthread_mutex_lock(&mutex);
        read_count++;
        if (read_count == 1) // First reader locks the writer
            sem_wait(&wrt);
        pthread_mutex_unlock(&mutex);

        // Critical section (reading)
        printf("Reader %d is reading: shared_data = %d\n", id, shared_data);
        sleep(1);

        // Exit section
        pthread_mutex_lock(&mutex);
        read_count--;
        if (read_count == 0) // Last reader unlocks the writer
            sem_post(&wrt);
        pthread_mutex_unlock(&mutex);

        sleep(rand() % 3);
    }
    pthread_exit(NULL);
}

void* writer(void* arg) {
    int id = *(int*)arg;
    while (1) {
        sem_wait(&wrt); // Writer locks access

        // Critical section (writing)
        shared_data += 1;
        printf("Writer %d is writing: shared_data = %d\n", id, shared_data);
        sleep(2);

        sem_post(&wrt); // Unlock for others

        sleep(rand() % 3);
    }
    pthread_exit(NULL);
}

int main() {
    pthread_t r[NUM_READERS], w[NUM_WRITERS];
    int reader_ids[NUM_READERS], writer_ids[NUM_WRITERS];

    // Initialize semaphore and mutex
    sem_init(&wrt, 0, 1);
    pthread_mutex_init(&mutex, NULL);

    // Create reader threads
    for (int i = 0; i < NUM_READERS; i++) {
        reader_ids[i] = i + 1;
        pthread_create(&r[i], NULL, reader, &reader_ids[i]);
    }

    // Create writer threads
    for (int i = 0; i < NUM_WRITERS; i++) {
        writer_ids[i] = i + 1;
        pthread_create(&w[i], NULL, writer, &writer_ids[i]);
    }

    // Wait for threads (infinite loop, simulation runs indefinitely)
    for (int i = 0; i < NUM_READERS; i++)
        pthread_join(r[i], NULL);
    for (int i = 0; i < NUM_WRITERS; i++)
        pthread_join(w[i], NULL);

    // Destroy semaphore and mutex (never reached here)
    sem_destroy(&wrt);
    pthread_mutex_destroy(&mutex);

    return 0;
}
